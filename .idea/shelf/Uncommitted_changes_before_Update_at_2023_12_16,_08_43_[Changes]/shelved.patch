Index: src/test/java/ch/mazluc/TupleTest.java
===================================================================
diff --git a/src/test/java/ch/mazluc/TupleTest.java b/src/test/java/ch/mazluc/TupleTest.java
deleted file mode 100644
--- a/src/test/java/ch/mazluc/TupleTest.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ /dev/null	(revision bedc40a42ca05840bc86a92737095a9b24272743)
@@ -1,409 +0,0 @@
-package ch.mazluc;
-import org.junit.jupiter.api.Test;
-
-import java.math.BigInteger;
-
-import static org.junit.jupiter.api.Assertions.*;
-class TupleTest {
-
-    @Test
-    void length() {
-        Tuple tuple = new Tuple();
-        assertEquals(0, tuple.length());
-        tuple.push(1);
-        assertEquals(1, tuple.length());
-        tuple.push(2);
-        assertEquals(2, tuple.length());
-        tuple.push(3);
-        assertEquals(3, tuple.length());
-    }
-
-    @Test
-    void isEmpty() {
-        Tuple tuple = new Tuple();
-        assertTrue(tuple.isEmpty());
-        tuple.push(1);
-        assertFalse(tuple.isEmpty());
-        tuple.pop();
-        assertTrue(tuple.isEmpty());
-    }
-
-    @Test
-    void testEquals() {
-        Data tuple = new Tuple();
-        Data tuple2 = new Tuple();
-        tuple.push(1);
-        assertNotEquals(tuple, tuple2);
-        tuple2.push(1);
-        assertEquals(tuple, tuple2);
-        tuple.push(2);
-        assertNotEquals(tuple, tuple2);
-        tuple2.push(2);
-        assertEquals(tuple, tuple2);
-        tuple.push(3);
-        assertNotEquals(tuple, tuple2);
-        tuple2.push(3);
-        assertEquals(tuple, tuple2);
-        tuple.push(4);
-        assertNotEquals(tuple, tuple2);
-        tuple2.push(4);
-        assertEquals(tuple, tuple2);
-    }
-
-    @Test
-    void contains() {
-        Data tuple = new Tuple(1);
-        tuple.push(1);
-        assertTrue(tuple.contains(1));
-        assertFalse(tuple.contains(2));
-    }
-
-    @Test
-    void containsType() {
-        Tuple tuple = new Tuple(1);
-        tuple.push(1);
-        assertTrue(tuple.containsType(Integer.class));
-        assertFalse(tuple.containsType(String.class));
-        assertFalse(tuple.containsType(Boolean.class));
-        tuple.push(null);
-        assertFalse(tuple.containsType(Object.class));
-        assertFalse(tuple.containsType(Boolean.class));
-        tuple.push("test");
-        assertTrue(tuple.containsType(String.class));
-        assertFalse(tuple.containsType(Boolean.class));
-        tuple.push(true);
-        assertTrue(tuple.containsType(Boolean.class));
-    }
-
-    @Test
-    void setValues() {
-        Tuple tuple = new Tuple();
-        tuple.setValues(1, 2, 3, 4, 5);
-        assertEquals(5, tuple.length());
-        assertEquals(1, (int)tuple.getValue(0));
-        assertEquals(2, (int)tuple.getValue(1));
-        assertEquals(3, (int)tuple.getValue(2));
-        assertEquals(4, (int)tuple.getValue(3));
-        assertEquals(5, (int)tuple.getValue(4));
-        assertNotEquals(2, (int)tuple.getValue(0));
-        assertNotEquals(1, (int)tuple.getValue(1));
-        assertNotEquals(5, (int)tuple.getValue(2));
-        assertNotEquals(8, (int)tuple.getValue(3));
-        assertNotEquals(1, (int)tuple.getValue(4));
-    }
-
-    @Test
-    void push() {
-        Tuple tuple = new Tuple();
-        tuple.push(1);
-        tuple.push(2);
-        tuple.push(3);
-        assertEquals(3, tuple.length());
-        assertEquals(1, (int)tuple.getValue(0));
-        assertEquals(2, (int)tuple.getValue(1));
-        assertEquals(3, (int)tuple.getValue(2));
-        assertNotEquals(2, (int)tuple.getValue(0));
-        assertNotEquals(1, (int)tuple.getValue(1));
-        assertNotEquals(5, (int)tuple.getValue(2));
-    }
-
-    @Test
-    void insert() {
-        Tuple tuple = new Tuple(0);
-        tuple.insert(0, 2);
-        tuple.insert(2, 3);
-        assertEquals(3, tuple.length());
-        assertEquals(2, (int)tuple.getValue(0));
-        assertEquals(0, (int)tuple.getValue(1));
-        assertEquals(3, (int)tuple.getValue(2));
-        assertNotEquals(0, (int)tuple.getValue(0));
-        assertNotEquals(3, (int)tuple.getValue(1));
-        assertNotEquals(2, (int)tuple.getValue(2));
-    }
-
-    @Test
-    void replace() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", false);
-        tuple.replace(0, 1);
-        tuple.replace(1, 2);
-        tuple.replace(2, 3);
-        assertEquals(1, (int)tuple.getValue(0));
-        assertEquals(2, (int)tuple.getValue(1));
-        assertEquals(3, (int)tuple.getValue(2));
-        assertNotEquals(2, (int)tuple.getValue(0));
-        assertNotEquals(1, (int)tuple.getValue(1));
-        assertNotEquals(5, (int)tuple.getValue(2));
-    }
-
-    @Test
-    void swap() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", false);
-        tuple.swap(0, 1);
-        tuple.swap(1, 2);
-        tuple.swap(2, 3);
-        assertEquals(1, (int)tuple.getValue(0));
-        assertEquals(2, (int)tuple.getValue(1));
-        assertEquals(3, (int)tuple.getValue(2));
-        assertNotEquals(2, (int)tuple.getValue(0));
-        assertNotEquals(1, (int)tuple.getValue(1));
-        assertNotEquals(5, (int)tuple.getValue(2));
-    }
-
-    @Test
-    void getValue() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", false);
-        assertEquals(0, (int)tuple.getValue(0));
-        assertEquals(1, (int)tuple.getValue(1));
-        assertEquals(2, (int)tuple.getValue(2));
-        assertEquals(3, (int)tuple.getValue(3));
-        assertEquals(4, (int)tuple.getValue(4));
-        assertEquals(5, (int)tuple.getValue(5));
-        assertEquals(6, (int)tuple.getValue(6));
-        assertEquals(7, (int)tuple.getValue(7));
-        assertEquals(8, (int)tuple.getValue(8));
-        assertEquals(9, (int)tuple.getValue(9));
-        assertEquals("2", tuple.getValue(10));
-        assertEquals(false, tuple.getValue(11));
-    }
-
-    @Test
-    void getValuesOfType() {
-        BigInteger s = new BigInteger("12345678901234567890123456789012345678901234567890");
-        Tuple tuple = new Tuple(1, 2, 3, 4.0f, 5.5, 5.65, "Ciao", false, null, s);
-        assertEquals(tuple.getValuesOfType(Integer.class), new Tuple(1, 2, 3));
-        assertTrue(tuple.getValuesOfType(Float.class).contains(4.0f));
-        assertTrue(tuple.getValuesOfType(Double.class).contains(5.5));
-        assertEquals(tuple.getValuesOfType(String.class), new Tuple("Ciao"));
-        assertTrue(tuple.getValuesOfType(BigInteger.class).contains(s));
-    }
-
-    @Test
-    void indexOf() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false);
-        assertEquals(0, tuple.indexOf(0));
-        assertEquals(1, tuple.indexOf(1));
-        assertEquals(2, tuple.indexOf(2));
-        assertEquals(3, tuple.indexOf(3));
-        assertEquals(4, tuple.indexOf(4));
-        assertEquals(5, tuple.indexOf(5));
-        assertEquals(6, tuple.indexOf(6));
-        assertEquals(7, tuple.indexOf(7));
-        assertEquals(8, tuple.indexOf(8));
-        assertEquals(9, tuple.indexOf(9));
-        assertEquals(10, tuple.indexOf("2"));
-        assertEquals(11, tuple.indexOf(false));
-    }
-
-    @Test
-    void pop() {
-        Data tupleEmpty = new Tuple();
-        tupleEmpty.pop();
-        Data tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false);
-        tuple.pop();
-        assertEquals(11, tuple.length());
-        tuple.pop();
-        assertEquals(10, tuple.length());
-        tuple.pop();
-        assertEquals(9, tuple.length());
-        tuple.pop();
-        assertEquals(8, tuple.length());
-        tuple.pop();
-        assertEquals(7, tuple.length());
-        tuple.pop();
-        assertEquals(6, tuple.length());
-    }
-
-    @Test
-    void remove() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false);
-        tuple.remove(0);
-        assertEquals("[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, false]", tuple.toString());
-        tuple.remove(tuple.length() - 1);
-        assertEquals("[1, 2, 3, 4, 5, 6, 7, 8, 9, 2]", tuple.toString());
-        assertFalse(tuple.contains(false));
-        assertThrows(IndexOutOfBoundsException.class, () -> tuple.remove(-1));
-        tuple.clear();
-        tuple.remove(0);
-    }
-
-    @Test
-    void clear() {
-        Data tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false, null, null);
-        tuple.clear();
-        assertEquals(0, tuple.length());
-        tuple.clear();
-        assertEquals(0, tuple.length());
-    }
-
-    @Test
-    void testToString() {
-        Data tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false, null, null);
-        assertEquals("[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, false]", tuple.toString());
-        tuple.clear();
-        assertEquals("[]", tuple.toString());
-    }
-
-    @Test
-    void reverse() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false, null, null);
-        tuple.reverse();
-        assertEquals( "[false, 2, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",tuple.toString());
-        tuple.clear();
-        tuple.reverse();
-        assertEquals("[]", tuple.toString());
-    }
-
-    @Test
-    void slice() {
-        Data tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false, null, null);
-        tuple.slice(1, 4);
-        assertEquals( "[1, 2, 3]",tuple.toString());
-        tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false, null, null);
-        tuple.slice(7, tuple.length());
-        assertEquals( "[7, 8, 9, 2, false]", tuple.toString());
-        tuple.clear();
-        tuple.slice(0, 1);
-        assertEquals("[]", tuple.toString());
-    }
-
-    @Test
-    void split() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2", null, false, null, null);
-        Tuple tuple2 = new Tuple();
-        tuple.split(7, tuple2);
-        assertEquals( "[0, 1, 2, 3, 4, 5, 6]", tuple.toString());
-        assertEquals( "[7, 8, 9, 2, false]", tuple2.toString());
-        tuple.clear();
-        tuple.split(1, tuple2);
-        assertEquals("[]", tuple.toString());
-        assertEquals("[]", tuple2.toString());
-    }
-
-    @Test
-    void join() {
-        Data tuple = new Tuple(0, 1, 2, 3, 4, 5, 6);
-        Data tuple2 = new Tuple(7, 8, 9, 2, null, false);
-        Data tuple3 = new Tuple(null, null, "ciao");
-        Data tuple4 = new Tuple();
-        tuple.join(tuple2, tuple3, tuple4);
-        assertEquals( "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, false, ciao]", tuple.toString());
-        tuple3.clear();
-        tuple.join(tuple2, tuple3, tuple4);
-        assertEquals("[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, false, ciao, 7, 8, 9, 2, false]", tuple.toString());
-    }
-
-    @Test
-    void fill() {
-        Tuple tuple = new Tuple();
-        tuple.fill(1, 10);
-        assertEquals( "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", tuple.toString());
-        tuple.fill(1, 10);
-        assertEquals( "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", tuple.toString());
-        tuple.fill(1, 0);
-        assertEquals("[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", tuple.toString());
-    }
-
-    @Test
-    void isSubsetOf() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "2");
-        Tuple tuple2 = new Tuple(0, 9, 2, 3, 7, 5, 6, 4, 8, 1, "2", null, null, null, false);
-        assertTrue(tuple.isSubsetOf(tuple2));
-        tuple.push("1");
-        assertFalse(tuple.isSubsetOf(tuple2));
-        tuple.clear();
-        assertTrue(tuple.isSubsetOf(tuple2));
-    }
-
-    @Test
-    void isSupersetOf() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, null, false, null, null, "cuai");
-        Tuple tuple2 = new Tuple(0, 1, 3, false, null, null, null, 2);
-        assertTrue(tuple.isSupersetOf(tuple2));
-        tuple2.pop();
-        tuple2.push("1");
-        assertFalse(tuple.isSupersetOf(tuple2));
-        tuple2.clear();
-        assertTrue(tuple.isSupersetOf(tuple2));
-        assertThrows(NullPointerException.class, () -> tuple.isSupersetOf(null));
-        assertThrows(IllegalArgumentException.class, () -> tuple.isSupersetOf("0"));
-        assertDoesNotThrow(() -> tuple.isSupersetOf(new Tuple()));
-    }
-
-    @Test
-    void isStrictSupersetOf() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, false, null, null, "cuai");
-        Tuple tuple2 = new Tuple(0, 1, 2, 3, false);
-        assertTrue(tuple.isStrictSupersetOf(tuple2));
-        tuple2.pop();
-        tuple2.push("1");
-        assertFalse(tuple.isStrictSupersetOf(tuple2));
-        tuple2.clear();
-        assertTrue(tuple.isStrictSupersetOf(tuple2));
-        assertThrows(NullPointerException.class, () -> tuple.isStrictSupersetOf(null));
-        assertThrows(IllegalArgumentException.class, () -> tuple.isStrictSupersetOf("0"));
-        assertDoesNotThrow(() -> tuple.isStrictSupersetOf(new Tuple()));
-    }
-
-    @Test
-    void isStrictSubsetOf() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, false);
-        Tuple tuple2 = new Tuple(0, 1, 2, 3, false, "cuai");
-        assertTrue(tuple.isStrictSubsetOf(tuple2));
-        tuple2.pop();
-        tuple.push("1");
-        assertFalse(tuple.isStrictSubsetOf(tuple2));
-        tuple.clear();
-        assertTrue(tuple.isStrictSubsetOf(tuple2));
-        assertThrows(NullPointerException.class, () -> tuple.isStrictSubsetOf(null));
-        assertThrows(IllegalArgumentException.class, () -> tuple.isStrictSubsetOf("0"));
-        assertDoesNotThrow(() -> tuple.isStrictSubsetOf(new Tuple()));
-    }
-
-    @Test
-    void isDisjoint() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, null, false, null, null, "cuai");
-        Tuple tuple2 = new Tuple(0, 1, 2, 3, null, false, null, null);
-        assertFalse(tuple.isDisjoint(tuple2));
-        tuple2.clear();
-        tuple2.push("-1");
-        assertTrue(tuple.isDisjoint(tuple2));
-        tuple.clear();
-        assertTrue(tuple.isDisjoint(tuple2));
-        assertThrows(NullPointerException.class, () -> tuple.isDisjoint(null));
-        assertThrows(IllegalArgumentException.class, () -> tuple.isDisjoint("0"));
-        assertDoesNotThrow(() -> tuple.isDisjoint(new Tuple()));
-    }
-
-    @Test
-    void symmetricDifference() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, false, null, null, "cuai");
-        Tuple tuple2 = new Tuple(0, 1, 2, 3, false, null, null);
-        assertEquals("[4, 5, cuai]", tuple.symmetricDifference(tuple2).toString());
-        tuple2.push("-1");
-        assertEquals("[4, 5, cuai, -1]", tuple.symmetricDifference(tuple2).toString());
-        assertThrows(NullPointerException.class, () -> tuple.symmetricDifference(null));
-        assertThrows(IllegalArgumentException.class, () -> tuple.symmetricDifference("0"));
-        assertDoesNotThrow(() -> tuple.symmetricDifference(new Tuple()));
-    }
-
-    @Test
-    void subtract() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, false, null, null, "cuai");
-        Tuple tuple2 = new Tuple(0, 1, 2, 3, false, null, null);
-        assertEquals("[4, 5, cuai]", tuple.subtract(tuple2).toString());
-        tuple2.push("-1");
-        assertEquals("[4, 5, cuai]", tuple.subtract(tuple2).toString());
-        assertThrows(NullPointerException.class, () -> tuple.subtract(null));
-        assertThrows(IllegalArgumentException.class, () -> tuple.subtract("0"));
-        assertDoesNotThrow(() -> tuple.subtract(new Tuple()));
-    }
-
-    @Test
-    void filter() {
-        Tuple tuple = new Tuple(0, 1, 2, 3, 4, 5, false, null, null, "cuai");
-        Tuple tuple2 = new Tuple(0, 1, 2, 3, false, null, null);
-        assertEquals("[0, 1, 2, 3, 4, 5]", tuple.filter(o -> o instanceof Integer).toString());
-        tuple2.push(-1);
-        assertEquals("[-1]", tuple2.filter(o -> o instanceof Integer && (int) o < 0).toString());
-    }
-}
\ No newline at end of file
Index: src/test/java/ch/mazluc/TableTest.java
===================================================================
diff --git a/src/test/java/ch/mazluc/TableTest.java b/src/test/java/ch/mazluc/TableTest.java
deleted file mode 100644
--- a/src/test/java/ch/mazluc/TableTest.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ /dev/null	(revision bedc40a42ca05840bc86a92737095a9b24272743)
@@ -1,350 +0,0 @@
-package ch.mazluc;
-
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class TableTest {
-
-    @Test
-    void length() {
-        Table table = new Table();
-        assertEquals(0, table.length());
-        table.push(new Tuple(0, 1, 2));
-        assertEquals(1, table.length());
-        table.push(new Tuple(3, 4, 5));
-        assertEquals(2, table.length());
-    }
-
-    @Test
-    void isEmpty() {
-        Table table = new Table();
-        assertTrue(table.isEmpty());
-        table.push(new Tuple(0, 1, 2));
-        table.push(new Tuple(3, 4, 5));
-        assertFalse(table.isEmpty());
-    }
-
-    @Test
-    void contains() {
-        Table table = new Table();
-        table.push(new Tuple(0, 1, 2));
-        table.push(new Tuple(3, 4, 5));
-        assertTrue(table.contains(0));
-        assertFalse(table.contains(6));
-        assertTrue(table.contains(2));
-        table.clear();
-        assertFalse(table.contains(0));
-    }
-
-    @Test
-    void setValues() {
-        Table table = new Table();
-        table.setValues(new Tuple(0, 1), 1, 2, new Tuple(3, 4, 5, 6), 4);
-        assertEquals(5, table.length());
-        assertEquals(0, (int)table.getValue(0, 0));
-        assertEquals(1, (int)table.getValue(1,0));
-        assertEquals(2, (int)table.getValue(2,0));
-        assertEquals(6, (int)table.getValue(3,3));
-        assertEquals(4, (int)table.getValue(4,0));
-    }
-
-    @Test
-    void push() {
-        Table table = new Table();
-        table.push(1);
-        table.push(new Tuple(2, 3));
-        table.push(3);
-        assertFalse(table.isEmpty());
-        assertTrue(table.contains(1));
-        assertTrue(table.contains(2));
-        assertTrue(table.contains(3));
-        assertEquals(3, table.length());
-        assertEquals(1, (int)table.getValue(0,0));
-        assertEquals(2, (int)table.getValue(1,0));
-        assertEquals(3, (int)table.getValue(2,0));
-    }
-
-    @Test
-    void insert() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(6.5e13, 1, false),
-                new Tuple(1, 'e', 3),
-                new Tuple(3, 4.4, 5)
-        );
-        table.insert(0, 0, 6);
-        table.insert(1, 1, 7);
-        table.insert(2, 2, 8);
-        assertTrue(table.contains(6));
-        assertTrue(table.contains(7));
-        assertTrue(table.contains(8));
-        assertEquals(3, table.length());
-        assertEquals(6, (int)table.getValue(0,0));
-        assertEquals(7, (int)table.getValue(1,1));
-        assertEquals(8, (int)table.getValue(2,2));
-    }
-
-    @Test
-    void replace() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(0, "1", false),
-                new Tuple(1, 3.3, 3),
-                new Tuple(3, 4f, 5)
-        );
-        table.replace(0, 0, 6);
-        table.replace(1, 1, 7);
-        table.replace(2, 2, 8);
-        assertTrue(table.contains(6));
-        assertTrue(table.contains(7));
-        assertTrue(table.contains(8));
-        assertEquals(3, table.length());
-        assertEquals(6, (int)table.getValue(0,0));
-        assertEquals(7, (int)table.getValue(1,1));
-        assertEquals(8, (int)table.getValue(2,2));
-    }
-
-    @Test
-    void swap() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        table.swap(0, 1);
-        table.swap(1, 2);
-        assertEquals(3, (int)table.getValue(0,0));
-        assertEquals(0, (int)table.getValue(2,0));
-        assertFalse((boolean) table.getValue(1, 4));
-        assertNotEquals(2, (int)table.getValue(0,0));
-        assertNotEquals(1, (int)table.getValue(1,0));
-    }
-
-    @Test
-    void getValue() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        assertEquals(0, (int)table.getValue(0,0));
-        assertEquals(3, (int)table.getValue(1,0));
-        assertEquals(7, (int)table.getValue(2,0));
-        assertEquals(2, (int)table.getValue(0,2));
-        assertEquals("2", table.getValue(2,3));
-    }
-
-    @Test
-    void indexOf() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        assertArrayEquals(new int[]{0, 0}, table.indexOf(0));
-        assertArrayEquals(new int[]{0, 1}, table.indexOf(1));
-        assertArrayEquals(new int[]{0, 2}, table.indexOf(2));
-        assertArrayEquals(new int[]{1, 0}, table.indexOf(3));
-        assertArrayEquals(new int[]{1, 1}, table.indexOf(4));
-        assertArrayEquals(new int[]{1, 2}, table.indexOf(5));
-        assertArrayEquals(new int[]{1, 3}, table.indexOf(6));
-        assertArrayEquals(new int[]{2, 0}, table.indexOf(7));
-        assertArrayEquals(new int[]{2, 1}, table.indexOf(8));
-        assertArrayEquals(new int[]{2, 2}, table.indexOf(9));
-        assertArrayEquals(new int[]{2, 3}, table.indexOf("2"));
-        assertArrayEquals(new int[]{2, 4}, table.indexOf(false));
-    }
-
-    @Test
-    void pop() {
-        Table table = new Table(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        table.pop();
-        assertEquals(2, table.length());
-        table.pop();
-        assertEquals(1, table.length());
-        table.pop();
-        assertEquals(0, table.length());
-        table.pop();
-        assertEquals(0, table.length());
-    }
-
-    @Test
-    void remove() {
-        Table table = new Table(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        table.remove(0, 0);
-        assertEquals(3, table.length());
-        assertFalse(table.contains(0));
-        table.remove(1, 1);
-        assertEquals(3, table.length());
-        assertFalse(table.contains(4));
-        table.remove(2, 2);
-        assertEquals(3, table.length());
-        assertFalse(table.contains(9));
-        table.remove(0, 0);
-        assertEquals(3, table.length());
-        assertFalse(table.contains(0));
-    }
-
-    @Test
-    void clear() {
-        Table table = new Table();
-        table.setValues(new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        table.clear();
-        assertEquals(0, table.length());
-        assertFalse(table.contains(5));
-        assertFalse(table.contains(6));
-        assertFalse(table.contains(7));
-        assertFalse(table.contains(8));
-        assertFalse(table.contains(9));
-    }
-
-    @Test
-    void slice() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        table.slice(0, 2);
-        assertEquals(2, table.length());
-        assertEquals(0, (int)table.getValue(0,0));
-        assertEquals(6, (int)table.getValue(1,3));
-        table.slice(1, 2);
-        assertEquals(1 , table.length());
-        assertEquals(4, (int)table.getValue(0, 1));
-
-    }
-
-    @Test
-    void join() {
-        Table table = new Table();
-        Table table1 = new Table();
-        table.setValues(new Tuple(0, 1, 2), new Tuple(3, 4, 5, 6));
-        table1.setValues(new Tuple(7, 8, 9, "2", false), new Tuple(true, 'a'));
-        table.join(table1);
-        assertEquals(4, table.length());
-        assertEquals(0, (int)table.getValue(0,0));
-        assertEquals(1, (int)table.getValue(0,1));
-        assertEquals(2, (int)table.getValue(0,2));
-        assertEquals(3, (int)table.getValue(1,0));
-        assertEquals(4, (int)table.getValue(1,1));
-        assertEquals(5, (int)table.getValue(1,2));
-        assertEquals(6, (int)table.getValue(1,3));
-        assertEquals(7, (int)table.getValue(2,0));
-        assertEquals(8, (int)table.getValue(2,1));
-        assertEquals(9, (int)table.getValue(2,2));
-        assertEquals("2", table.getValue(2,3));
-        assertEquals(false, table.getValue(2,4));
-        assertEquals(true, table.getValue(3,0));
-        assertEquals('a', (char)table.getValue(3,1));
-    }
-
-    @Test
-    void isSubsetOf() {
-        Table table = new Table();
-        table.setValues(new Tuple(0, 1, 2), new Tuple(3, 4, 5, 6));
-        Table table1 = new Table();
-        table1.setValues(new Tuple(0, 1, 2), new Tuple(3, 4, 5, 6), new Tuple(7, 8, 9, "2"));
-        assertTrue(table.isSubsetOf(table1));
-        table1.setValues(new Tuple(0, 1, 2), new Tuple(3, 4, 5, 6), new Tuple(7, 8, 9, "2"));
-        assertTrue(table.isSubsetOf(table1));
-        table1.setValues(new Tuple(0, 1, 2));
-        assertFalse(table.isSubsetOf(table1));
-    }
-
-    @Test
-    void isSupersetOf() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        Table table1 = new Table();
-        table1.setValues(new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        assertTrue(table.isSupersetOf(table1));
-        table1.setValues(new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false),
-                new Tuple(10, 11, 12, "3", true)
-        );
-        assertFalse(table.isSupersetOf(table1));
-        table1.setValues(new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false),
-                new Tuple(10, 11, 12, "3", true),
-                new Tuple(13, 14, 15, "4", false)
-        );
-        assertFalse(table.isSupersetOf(table1));
-    }
-
-    @Test
-    void subtract() {
-        Table table = new Table();
-        Table table1 = new Table();
-        table.setValues(new Tuple(0, 1, 2), new Tuple(3, 4, 5, 6), new Tuple(7, 8, 9));
-        table1.setValues(new Tuple(0, 1, 2));
-        Table comp = new Table(new Tuple(3, 4, 5, 6), new Tuple(7, 8, 9));
-        Table subt = (Table) table.subtract(table1);
-        assertEquals(comp, subt);
-    }
-
-    @Test
-    void filter() {
-        Table table = new Table();
-        table.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3.0, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        assertEquals("[2]", table.filter(t -> t instanceof String).toString());
-        assertEquals("[0, 1, 2, 4, 5, 6, 7, 8, 9]", table.filter(t -> t instanceof Integer).toString());
-        assertEquals("[3.0]", table.filter(t -> t instanceof Double).toString());
-        assertEquals("[0, 1, 2, 3.0, 4, 5, 6, 7, 8, 9]", table.filter(t -> t instanceof Number).toString());
-    }
-
-    @Test
-    void isDisjoint() {
-        Table table = new Table();
-        table.setValues(new Tuple("ciao", true), new Tuple(0.2, 4.4f));
-        Table table1 = new Table();
-        table1.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false)
-        );
-        assertTrue(table.isDisjoint(table1));
-        table1.setValues(
-                new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false),
-                new Tuple(10, 11, 12, "3", true)
-        );
-        assertFalse(table.isDisjoint(table1));
-        table1.setValues(new Tuple(0, 1, 2),
-                new Tuple(3, 4, 5, 6),
-                new Tuple(7, 8, 9, "2", false),
-                new Tuple(10, 11, 12, "3", false)
-        );
-        assertTrue(table.isDisjoint(table1));
-    }
-}
\ No newline at end of file
Index: src/test/java/ch/mazluc/BCMLDocumentTest.java
===================================================================
diff --git a/src/test/java/ch/mazluc/BCMLDocumentTest.java b/src/test/java/ch/mazluc/BCMLDocumentTest.java
deleted file mode 100644
--- a/src/test/java/ch/mazluc/BCMLDocumentTest.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ /dev/null	(revision bedc40a42ca05840bc86a92737095a9b24272743)
@@ -1,66 +0,0 @@
-/*
- * MIT License
- *
- * Copyright (c) 2023 Luca Mazza
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-package ch.mazluc;
-
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class BCMLDocumentTest {
-
-    @Test
-    void lineCount() {
-        BCMLDocument<Integer> document = new BCMLDocument<>();
-        assertEquals(0, document.lineCount());
-        document.append(new Line<>(3,"First line"));
-        assertEquals(1, document.lineCount());
-    }
-
-    @Test
-    void isEmpty() {
-        BCMLDocument<Integer> document = new BCMLDocument<>();
-        assertTrue(document.isEmpty());
-        document.append(new Line<>(3,"First line"));
-        assertFalse(document.isEmpty());
-    }
-
-    @Test
-    void getLine() {
-    }
-
-    @Test
-    void append() {
-    }
-
-    @Test
-    void clear() {
-    }
-
-    @Test
-    void serialize() {
-    }
-
-    @Test
-    void iterator() {
-    }
-}
\ No newline at end of file
Index: src/main/java/ch/mazluc/Table.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/Table.java b/src/main/java/ch/mazluc/data/Table.java
rename from src/main/java/ch/mazluc/Table.java
rename to src/main/java/ch/mazluc/data/Table.java
--- a/src/main/java/ch/mazluc/Table.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ b/src/main/java/ch/mazluc/data/Table.java	(date 1702712612709)
@@ -20,7 +20,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
-package ch.mazluc;
+package ch.mazluc.data;
 
 import java.util.Iterator;
 import java.util.NoSuchElementException;
Index: src/main/java/ch/mazluc/Tuple.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/Tuple.java b/src/main/java/ch/mazluc/data/Tuple.java
rename from src/main/java/ch/mazluc/Tuple.java
rename to src/main/java/ch/mazluc/data/Tuple.java
--- a/src/main/java/ch/mazluc/Tuple.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ b/src/main/java/ch/mazluc/data/Tuple.java	(date 1702712612698)
@@ -20,7 +20,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
-package ch.mazluc;
+package ch.mazluc.data;
 
 import java.util.Arrays;
 import java.util.Iterator;
@@ -32,7 +32,9 @@
 import static java.lang.System.arraycopy;
 
 /**
- * This class represents a tuple of values
+ * <h1>
+ * Tuple
+ * </h1>
  *
  * @author Luca Mazza
  * @version 1.0
@@ -40,7 +42,7 @@
  */
 public class Tuple implements Data {
 
-    private static final String OINAT = "Object is not a tuple";
+    private static final String NOT_A_TUPLE = "Object is not a tuple";
 
     private static final Random random = new Random();
     /**
@@ -451,7 +453,7 @@
      * @since 1.0
      */
     public void split(int index, Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (index > this.values.length) {
             index = this.values.length;
         }
@@ -545,7 +547,7 @@
      */
     @Override
     public boolean isSubsetOf(Object data) throws IllegalArgumentException{
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() > ((Tuple) data).length()) {
             return false;
         }
@@ -566,7 +568,7 @@
      */
     @Override
     public boolean isSupersetOf(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() < ((Tuple) data).length()) {
             return false;
         }
@@ -583,7 +585,7 @@
      * @return true if this set is a strict superset of the given tuple, false otherwise
      */
     public boolean isStrictSupersetOf(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() < ((Tuple) data).length()) {
             return false;
         }
@@ -608,7 +610,7 @@
      * @return true if this set is a strict subset of the given tuple, false otherwise
      */
     public boolean isStrictSubsetOf(Object data) throws IllegalArgumentException{
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() > ((Tuple) data).length()) {
             return false;
         }
@@ -632,7 +634,7 @@
      */
     @Override
     public boolean isDisjoint(Object data) throws IllegalArgumentException{
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (data.equals(this)) {
             return false;
         }
@@ -654,7 +656,7 @@
      * @return the symmetric difference
      */
     public Object symmetricDifference(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         Tuple tuple = (Tuple) data;
         Tuple result = new Tuple();
         for (int i = 0; i < this.length(); i++) {
@@ -678,7 +680,7 @@
      */
     @Override
     public Object subtract(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         Tuple tmp = (Tuple) data;
         Tuple result = new Tuple();
         for (int i = 0; i < this.length(); i++) {
Index: src/main/java/ch/mazluc/Document.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/Document.java b/src/main/java/ch/mazluc/data/Document.java
rename from src/main/java/ch/mazluc/Document.java
rename to src/main/java/ch/mazluc/data/Document.java
--- a/src/main/java/ch/mazluc/Document.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ b/src/main/java/ch/mazluc/data/Document.java	(date 1702712612710)
@@ -20,10 +20,9 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
-package ch.mazluc;
+package ch.mazluc.data;
 
 import java.io.Serializable;
-import java.lang.reflect.Type;
 
 /**
  * Interface for Document.
Index: src/main/java/ch/mazluc/StringTool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/StringTool.java b/src/main/java/ch/mazluc/data/StringTool.java
rename from src/main/java/ch/mazluc/StringTool.java
rename to src/main/java/ch/mazluc/data/StringTool.java
--- a/src/main/java/ch/mazluc/StringTool.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ b/src/main/java/ch/mazluc/data/StringTool.java	(date 1702712612700)
@@ -20,7 +20,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
-package ch.mazluc;
+package ch.mazluc.data;
 
 public class StringTool {
 
Index: src/main/java/ch/mazluc/BCMLDocument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/BCMLDocument.java b/src/main/java/ch/mazluc/data/BCMLDocument.java
rename from src/main/java/ch/mazluc/BCMLDocument.java
rename to src/main/java/ch/mazluc/data/BCMLDocument.java
--- a/src/main/java/ch/mazluc/BCMLDocument.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ b/src/main/java/ch/mazluc/data/BCMLDocument.java	(date 1702712612711)
@@ -20,7 +20,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
-package ch.mazluc;
+package ch.mazluc.data;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
Index: src/main/java/ch/mazluc/Data.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/Data.java b/src/main/java/ch/mazluc/data/Data.java
rename from src/main/java/ch/mazluc/Data.java
rename to src/main/java/ch/mazluc/data/Data.java
--- a/src/main/java/ch/mazluc/Data.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ b/src/main/java/ch/mazluc/data/Data.java	(date 1702712612708)
@@ -1,4 +1,4 @@
-package ch.mazluc;
+package ch.mazluc.data;
 
 import java.util.function.Predicate;
 
Index: src/main/java/ch/mazluc/Line.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/Line.java b/src/main/java/ch/mazluc/data/Line.java
rename from src/main/java/ch/mazluc/Line.java
rename to src/main/java/ch/mazluc/data/Line.java
--- a/src/main/java/ch/mazluc/Line.java	(revision bedc40a42ca05840bc86a92737095a9b24272743)
+++ b/src/main/java/ch/mazluc/data/Line.java	(date 1702712612695)
@@ -20,7 +20,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
-package ch.mazluc;
+package ch.mazluc.data;
 
 import java.lang.reflect.Array;
 import java.util.Arrays;
