Index: src/main/java/ch/mazluc/data/BCMLDocument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/data/BCMLDocument.java b/src/main/java/ch/mazluc/data/BCMLDocument.java
deleted file mode 100644
--- a/src/main/java/ch/mazluc/data/BCMLDocument.java	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ /dev/null	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
@@ -1,236 +0,0 @@
-package ch.mazluc.data;
-
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.logging.Level;
-import java.util.logging.LogRecord;
-import java.util.logging.Logger;
-/*
- * MIT License
- *
- * Copyright (c) 2023 Luca Mazza
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-/**
- * <h1>
- * BCMLDocument
- * </h1>
- *
- * <p>
- * Represents a document of type BCML.
- * A document is made of lines.
- * A line is made of a key and a value.
- *
- *<p>
- * Usage:
- * <pre>
- * {@code
- * Document<String> document = new BCMLDocument(); // create an empty document
- * document.push("key", "value"); // add a line
- * document.push("key", "value"); // add another line
- * document.serialize(file); // serialize the document
- * document.clear(); // clear the document
- * document.deserialize(file); // deserialize the document
- * }
- * </pre>
- *
- * <p>
- * See Repo for more: <a href="https://github.com/lucamazzza/BData">GitHub</a>
- *
- * @param <K> key type
- * @author Luca Mazza
- * @version 1.0
- */
-public class BCMLDocument<K> implements Document<K>{
-
-    /**
-     * The array of lines.
-     */
-    private final transient List<Line<K>> lines;
-
-    /**
-     * Logger for this class.
-     */
-    private static final Logger logger = Logger.getLogger(BCMLDocument.class.getName());
-
-    /**
-     * BCMLDocument constructor.
-     */
-    public BCMLDocument() {
-        this.lines = new ArrayList<>();
-    }
-
-    /**
-     * BCMLDocument constructor.
-     *
-     * @param file the file in which the document is contained
-     */
-    public BCMLDocument(File file){
-        this();
-        this.deserialize(file);
-    }
-
-    /**
-     * Retrieves the count of lines of the Document.
-     *
-     * @return the count of lines
-     */
-    @Override
-    public int lineCount() {
-        return this.lines.size();
-    }
-
-    /**
-     * Checks if the Document is empty or not.
-     *
-     * @return true if the Document is empty, false otherwise
-     */
-    @Override
-    public boolean isEmpty() {
-        return lines.isEmpty();
-    }
-
-    /**
-     * Retrieves the line at the specified index.
-     *
-     * @param index the index
-     * @return the line
-     * @throws IndexOutOfBoundsException if the index is out of bounds
-     */
-    @Override
-    public Line<K> getLine(int index) throws IndexOutOfBoundsException {
-        if (this.isEmpty()) { throw new IndexOutOfBoundsException("Index " + index + " out of bounds for length 0"); }
-        return this.lines.get(index);
-    }
-
-    /**
-     * Appends a line at the end of the document.
-     *
-     * @param line the line
-     */
-    @Override
-    public void append(Line<K> line) {
-        this.lines.add(line);
-    }
-
-    /**
-     * Empties the Document
-     */
-    @Override
-    public void clear() {
-        this.lines.clear();
-    }
-
-    private void toBCML(String doc) {
-        for (String line : doc.split("\n")) {
-            this.append(Line.parseLine(line));
-        }
-    }
-
-    /**
-     * Serializes the document to the given file.
-     *
-     * @param  file  the file to be serialized in
-     */
-    public void serialize(File file) {
-        try (BufferedWriter writer = new BufferedWriter(new java.io.FileWriter(file))) {
-            for (Line<K> line : this) {
-                writer.append(line.toString());
-            }
-            writer.flush();
-            logger.log(new LogRecord(Level.INFO, "Document serialized to " + file.getAbsolutePath()));
-        } catch (Exception e) {
-            logger.warning(e.getMessage());
-        }
-    }
-
-    /**
-     * Deserializes the document in the given file.
-     *
-     * @param  file  the file in which the document is contained
-     */
-    private void deserialize(File file) {
-        try(BufferedReader reader = new BufferedReader(new java.io.FileReader(file))) {
-            if (reader.lines().findAny().isEmpty()) {
-                logger.log(
-                        new LogRecord(
-                                Level.WARNING,
-                                "Document is empty, can't deserialize from " + file.getAbsolutePath()
-                        )
-                );
-                return;
-            }
-            if (reader.lines().findAny().isEmpty()) {
-                logger.log(
-                        new LogRecord(
-                                Level.WARNING,
-                                "Document is empty, can't deserialize from " + file.getAbsolutePath()
-                        )
-                );
-                return;
-            }
-            StringBuilder doc = new StringBuilder();
-            String line;
-            while ((line = reader.readLine()) != null) {
-                line = line.trim();
-                if (line.isEmpty() || line.charAt(0) == '#') { continue; }
-                doc.append(line).append("\n");
-                line = line.trim();
-                doc.append(line).append("\n");
-            }
-            doc = new StringBuilder(doc.toString().replace("(?<=\\{)\\n|\\t|(?=\\})\\n\\t", ""));
-            doc = new StringBuilder(doc.toString().trim());
-            this.lines.clear();
-            this.toBCML(doc.toString());
-            logger.log(new LogRecord(Level.INFO, "Document deserialized from " + file.getAbsolutePath()));
-        } catch (Exception e) {
-            logger.warning(e.getMessage());
-        }
-    }
-
-    /**
-     * Returns an iterator over elements of type {@code T}.
-     *
-     * @return an Iterator.
-     */
-    @Override
-    public Iterator<Line<K>> iterator() {
-        return new Iterator<>() {
-            private int currentIndex = 0;
-
-            @Override
-            public boolean hasNext() {
-                return currentIndex < lineCount() && lines.get(currentIndex) != null;
-            }
-
-            @Override
-            public Line<K> next() throws NoSuchElementException {
-                if (!hasNext()) {
-                    throw new NoSuchElementException();
-                }
-                return lines.get(currentIndex++);
-            }
-        };
-    }
-}
\ No newline at end of file
Index: src/main/java/ch/mazluc/data/Document.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/data/Document.java b/src/main/java/ch/mazluc/data/Document.java
deleted file mode 100644
--- a/src/main/java/ch/mazluc/data/Document.java	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ /dev/null	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
@@ -1,92 +0,0 @@
-package ch.mazluc.data;
-
-import java.io.Serializable;
-/*
- * MIT License
- *
- * Copyright (c) 2023 Luca Mazza
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-/**
- * <h1>
- * Document
- * </h1>
- *
- * <p>
- * Defines an abstract document.
- * A document is made of lines.
- * Every document can be serialized and deserialized.
- *
- * <p>
- * Usage:
- *
- * <pre>
- * {@code
- * Document<String> document = new BCMLDocument(); // create an empty document
- * document.append(new Line<>("key", "value")); // add a line
- * document.getLine(0).getValue(); // get the value
- * document.serialize(file); // serialize the document
- * document.clear(); // clear the document
- * document.deserialize(file); // deserialize the document
- * }
- * </pre>
- *
- * See Repo for more: <a href="https://github.com/lucamazzza/BData">GitHub</a>
- *
- * @param <K> key type
- * @author Luca Mazza
- * @version 1.0
- */
-public interface Document<K> extends Iterable<Line<K>>, Serializable {
-
-    /**
-     * Retrieves the count of lines of the Document.
-     *
-     * @return the count of lines
-     */
-    int lineCount();
-
-    /**
-     * Checks if the Document is empty or not.
-     *
-     * @return true if the Document is empty, false otherwise
-     */
-    boolean isEmpty();
-
-
-    /**
-     * Retrieves the line at the specified index.
-     *
-     * @param index the index
-     * @return the line
-     */
-    Line<K> getLine(int index);
-
-    /**
-     * Appends a line at the end of the document.
-     *
-     * @param line the line
-     */
-    void append(Line<K> line);
-
-    /**
-     * Empties the Document
-     */
-    void clear();
-}
Index: src/main/java/ch/mazluc/data/Line.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/data/Line.java b/src/main/java/ch/mazluc/data/Line.java
deleted file mode 100644
--- a/src/main/java/ch/mazluc/data/Line.java	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ /dev/null	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
@@ -1,177 +0,0 @@
-
-package ch.mazluc.data;
-
-import java.lang.reflect.Array;
-import java.util.Arrays;
-import java.util.Objects;
-/*
- * MIT License
- *
- * Copyright (c) 2023 Luca Mazza
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-/**
- * <h1>
- * Line
- * </h1>
- *
- * <p>
- * This class represents a line of data.
- * A line of data is a value linked to a key.
- * The value is an object of any type,
- * the key is an object of specific type.
- *
- * <p>
- * Usage:
- *
- * <pre>
- * {@code
- * Line<String> line = new Line<>("key", "value"); // create a line
- * line.toString(); // "key: value"
- * line.getKey(); // "key"
- * line.getValue(); // "value"
- * line.getKeyType(); // java.lang.String
- * }
- * </pre>
- *
- * <p>
- * See Repo for more: <a href="https://github.com/lucamazzza/BData">GitHub</a>
- *
- * @author Luca Mazza
- * @version 1.0
- */
-public record Line<K>(K key, Object value) {
-    /**
-     * Constructor for the line
-     *
-     * @param key the key
-     * @param value the value
-     */
-    public Line {
-        Objects.requireNonNull(key);
-        Objects.requireNonNull(value);
-    }
-
-    /**
-     * Constructor for the empty line
-     *
-     * @param key the key
-     */
-    public Line(K key) {
-        this(key, null);
-    }
-
-    /**
-     * Returns the string representation of the line
-     *
-     * @return the string representation
-     */
-    @Override
-    public String toString() {
-        String result = (
-                key.getClass() == String.class ?
-                        "\"" + this.key + "\"" :
-                        this.key.toString());
-
-        if (this.value != null && this.value.getClass().isArray()) {
-            if (this.value instanceof Object[] objects) {
-                return result + ": " + Arrays.deepToString(objects);
-            }
-            int length = Array.getLength(this.value);
-            Object[] array = new Object[length];
-            for (int i = 0; i < length; i++) {
-                array[i] = Array.get(this.value, i);
-            }
-            return result + ": " + Arrays.deepToString(array);
-        }
-
-        if (this.value != null && this.value instanceof String string) {
-            return result + ": " + "\""+ string + "\"";
-        }
-
-        if (this.value != null && this.value instanceof Line<?> line) {
-            String nestedLine = line.toString().replace("\n", "\n\t");
-            return result + ": {\n\t" + nestedLine + "\n}";
-        }
-
-        return result + ": " + this.value;
-    }
-
-    /**
-     * Returns the key type of the line.
-     *
-     * @return the key type
-     */
-    public Class<?> keyType() {
-        return key.getClass();
-    }
-
-    /**
-     * Parses a line from a string.
-     *
-     * @param s the string
-     * @return the line
-     * @throws ClassCastException if the line is invalid
-     */
-    @SuppressWarnings("unchecked")
-    public static <K> Line<K> parseLine(String s) throws ClassCastException {
-        s = StringTool.trimAll(s);
-        String[] splitted = s.split(":");
-        K key = null;
-        if (splitted.length == 2){
-            try {
-                key = (K) StringTool.parseString(splitted[0]);
-            } catch (ClassCastException ignored) {
-                throw new ClassCastException("Invalid key type: " + splitted[0]);
-            }
-            if (splitted[1].startsWith("[") && splitted[1].endsWith("]")) {
-                Object[] value = StringTool.toArray(splitted[1]);
-                return new Line<>(key, value);
-            }
-            Object value = StringTool.parseString(splitted[1]);
-            return new Line<>(key, value);
-        }
-        try {
-            return new Line<>(
-                    (K) StringTool.parseString(splitted[0]),
-                    parseLine(s.substring(splitted[0].length() + 1))
-            );
-        } catch (ClassCastException ignored) {
-            throw new ClassCastException("Invalid key type: " + splitted[0]);
-        }
-    }
-
-    /**
-     * Returns the subline at the specified depth
-     *
-     * @param depth the depth
-     * @return the subline
-     */
-    @SuppressWarnings("unchecked")
-    public Line<K> subLine(int depth) {
-        if (depth == 0) {
-            return this;
-        }
-        try {
-            return ((Line<K>) this.value()).subLine(depth - 1);
-        } catch (ClassCastException ignored) {
-            return this;
-        }
-    }
-}
Index: src/main/java/ch/mazluc/data/StringTool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/data/StringTool.java b/src/main/java/ch/mazluc/data/StringTool.java
deleted file mode 100644
--- a/src/main/java/ch/mazluc/data/StringTool.java	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ /dev/null	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
@@ -1,97 +0,0 @@
-package ch.mazluc.data;
-/*
- * MIT License
- *
- * Copyright (c) 2023 Luca Mazza
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-
-/**
- * <h1>
- * StringTool
- * </h1>
- *
- * <p>
- * This class contains useful methods for strings.
- *
- * <p>
- * Usage:
- *
- * <pre>
- * {@code
- * s = StringTool.join(",", "a", "b", "c");
- * s = StringTool.trimAll("  a  b  ");
- *
- * }
- * </pre>
- */
-public class StringTool {
-
-    private StringTool(){
-        // utility
-    }
-
-    public static String join(String separator, String... strings) {
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < strings.length; i++) {
-            sb.append(strings[i]);
-            if (i < strings.length - 1) {
-                sb.append(separator);
-            }
-        }
-        return sb.toString();
-    }
-
-    public static String trimAll(String string) {
-        return string.replaceAll("\\s|\\{|\\}|\"", "");
-    }
-
-    public static Object[] toArray(String s) {
-        s = s.replaceAll("\\[|\\]", "");
-        String[] splitted = s.split(",");
-        Object[] result = new Object[splitted.length];
-        for (int i = 0; i < splitted.length; i++) {
-            result[i] = parseString(splitted[i]);
-        }
-        return result;
-    }
-
-    public static Object parseString(String s) {
-        s = trimAll(s);
-        if (s.isEmpty()) {
-            return null;
-        }
-
-        try {
-            return Integer.parseInt(s);
-        } catch (NumberFormatException e1) {
-            try {
-                return Double.parseDouble(s);
-            } catch (NumberFormatException e2) {
-                if (s.equalsIgnoreCase("true") || s.equalsIgnoreCase("false")) {
-                    return Boolean.parseBoolean(s);
-                } else if (s.length() == 1) {
-                    return s.charAt(0);
-                } else {
-                    return s;
-                }
-            }
-        }
-    }
-}
Index: src/main/java/ch/mazluc/data/Tuple.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.mazluc.data;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Random;\nimport java.util.function.Predicate;\nimport java.util.stream.IntStream;\n\nimport static java.lang.System.arraycopy;\n/*\n * MIT License\n *\n * Copyright (c) 2023 Luca Mazza\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * <h1>\n * Tuple\n * </h1>\n *\n * <p>\n * This class represents a tuple of values.\n * A tuple is a sequence of values that can be\n * accessed by index, it is weakly typed and\n * is also iterable.\n * Implements the {@link Data} interface\n *\n * <p>\n * Usage:\n *\n * <pre>\n * {@code\n * Tuple tuple = new Tuple(); // create an empty tuple\n * tuple.push(1); // add a value\n * tuple.push(2); // add another value\n * tuple.push(3); // add another value\n * for (int i = 0; i < tuple.length(); i++) { // iterate on the tuple\n *     System.out.println(tuple.getValue(i));\n * }\n * }\n * </pre>\n *\n * <p>\n * See Repo for more: <a href=\"https://github.com/lucamazzza/BData\">GitHub</a>\n *\n * @author Luca Mazza\n * @version 1.0\n */\npublic class Tuple implements Data {\n\n    /**\n     * Message when an object is not a tuple\n     */\n    private static final String OINAT = \"Object is not a tuple\";\n\n    /**\n     * Random generator.\n     * Used to generate random values throughout the class.\n     */\n    private static final Random random = new Random();\n\n    /**\n     * The values of the tuple.\n     * Values are stored in an array of Objects, as they can be of any type.\n     *\n     * <p>\n     * The values of the tuple can be accessed by index.\n     */\n    private Object[] values;\n\n    /**\n     * Creates a new instance of a Tuple.\n     *\n     * <p>\n     * Instantiates an empty array of values, with a length of 0.\n     */\n    public Tuple() {\n        this.values = new Object[0];\n    }\n\n    /**\n     * Creates a new instance of tuple.Tuple\n     * Defines the values of the tuple\n     *\n     * @param values the values of the tuple\n     * \n     */\n    public Tuple(Object... values) {\n        if (values.length == 0) {\n            this.values = new Object[0];\n            return;\n        }\n        this.values = new Object[values.length];\n        arraycopy(values, 0, this.values, 0, values.length);\n        this.clearNulls();\n    }\n\n    /**\n     * Determines if the given object is an instance of Tuple.\n     *\n     * @param obj the object to be checked\n     * @return  true if the object is an instance of Tuple, false otherwise\n     */\n    static boolean isTuple(Object obj) {\n        return obj.getClass() == Tuple.class;\n    }\n\n    /**\n     * Returns the length of the tuple\n     *\n     * @return the length of the tuple\n     * \n     */\n    @Override\n    public int length() {\n        return this.values.length;\n    }\n\n    /**\n     * Returns if the tuple is empty\n     *\n     * @return if the tuple is empty\n     * \n     */\n    @Override\n    public boolean isEmpty(){\n        return this.values.length == 0;\n    }\n\n    /**\n     * Returns if the tuple is equal to another\n     *\n     * @param obj the tuple to compare\n     * @return if the tuple is equal to another\n     * \n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj != null && !isTuple(obj)) {\n            return false;\n        }\n        Tuple tuple = (Tuple) obj;\n        assert tuple != null;\n        if(this.values.length != tuple.values.length){\n            return false;\n        }\n        for (int i = 0; i < this.values.length; i++) {\n            if (this.values[i] != tuple.values[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Determines whether the given value is contained within the collection.\n     *\n     * @param value the value to check for containment\n     * @return true if the value is contained, false otherwise\n     * \n     */\n    @Override\n    public <T> boolean contains(T value) {\n        return this.indexOf(value) != -1;\n    }\n\n    /**\n     * Returns if the tuple contains a value of the specified type\n     *\n     * @param type the type of the value\n     * @return if the tuple contains a value of the specified type\n     * \n     */\n    public boolean containsType(Class<?> type) {\n        for (Object value : this.values) {\n            if (value == null) {\n                return false;\n            }\n            if (value.getClass() == type) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Replaces the values of the tuple\n     *\n     * @param values the new values of the tuple\n     * \n     */\n    public void setValues(Object... values){\n        if (values.length == 0) {\n            this.values = new Object[0];\n            return;\n        }\n        this.values = values;\n        this.clearNulls();\n    }\n\n    /**\n     * Appends a value of T type to the tuple\n     *\n     * @param <T> value the value to append\n     * \n     */\n    @Override\n    public <T> void push(T value) {\n        if (value == null) {\n            return;\n        }\n        Object[] newValues = new Object[this.values.length + 1];\n        arraycopy(this.values, 0, newValues, 0, this.values.length);\n        newValues[this.values.length] = value;\n        this.values = newValues;\n        this.clearNulls();\n    }\n\n    /**\n     * Inserts a new value at the specified index\n     *\n     * @param index index to insert the value into\n     * @param value value to insert\n     * \n     */\n    public <T> void insert(int index, T value) throws IndexOutOfBoundsException {\n        if (value == null) {\n            return;\n        }\n        Object[] newValues = new Object[this.values.length + 1];\n        arraycopy(this.values, 0, newValues, 0, index);\n        newValues[index] = value;\n        arraycopy(this.values, index, newValues, index + 1, this.values.length - index);\n        this.values = newValues;\n        this.clearNulls();\n    }\n\n    /**\n     * Replaces the value at the specified index\n     *\n     * @param index the index of the value\n     * @param value the new value\n     * \n     */\n    public <T> void replace(int index, T value) throws IndexOutOfBoundsException {\n        if (value == null) {\n            return;\n        }\n        if (index < 0 || index >= this.values.length) {\n            throw new IndexOutOfBoundsException(\"Index \" + index + \" out of bounds for length \" + this.values.length);\n        }\n        this.values[index] = value;\n        this.clearNulls();\n    }\n\n    /**\n     * Swaps the elements at the specified indices in the array.\n     *\n     * @param index1 the index of the first element to be swapped\n     * @param index2 the index of the second element to be swapped\n     * \n     */\n    @Override\n    public void swap(int index1, int index2) throws IndexOutOfBoundsException {\n        if (index1 < 0 || index2 < 0 || index1 >= this.values.length || index2 >= this.values.length) {\n            throw new IndexOutOfBoundsException(\"Index out of bounds for length \" + this.values.length);\n        }\n        Object temp = this.values[index1];\n        this.values[index1] = this.values[index2];\n        this.values[index2] = temp;\n    }\n\n    /**\n     * Returns the value at the specified index of the tuple\n     * Value is already typed, but be careful, put your values\n     * in a rightful type variable\n     *\n     * @param index the index of the value\n     * @return the value at the specified index\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getValue(int index) throws IndexOutOfBoundsException {\n        if (index < 0 || index >= this.values.length) {\n            throw new IndexOutOfBoundsException(\"Index \" + index + \" out of bounds for length \" + this.values.length);\n        }\n        return (T) this.values[index];\n    }\n\n    /**\n     * Returns a new tuple with only the values of the specified type\n     *\n     * @param type the type of the values (to pass as `Class.class`, for example `Integer.class`)\n     * @return a new tuple with only the values of the specified type\n     */\n    public Tuple getValuesOfType(Class<?> type) {\n        Tuple tuple = new Tuple();\n        if (!containsType(type)) {\n            return tuple;\n        }\n        Tuple copy = new Tuple(this.values); // Create a copy of the original tuple\n        for (int i = 0; i < copy.length(); i++) {\n            if (copy.getValue(i) == null) {\n                copy.remove(i);\n            }\n        }\n        for (Object value : copy) {\n            if (value.getClass() == type) {\n                tuple.push(value);\n            }\n        }\n        return tuple;\n    }\n\n    /**\n     * Returns the index of a specified value\n     *\n     * @param value the value to search\n     * @return the index of the value\n     */\n    public <T> int indexOf(T value) {\n        for (int i = 0; i < this.values.length; i++) {\n            if (value instanceof String && this.values[i].equals(value.toString())) {\n                return i;\n            }\n            if (value instanceof Tuple && this.values[i].equals(value)) {\n                return i;\n            }\n            if (this.values[i] != null && this.values[i].equals(value)) {\n                return i;\n            }\n            if (this.values[i] == value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Removes the last value of the tuple\n     */\n    @Override\n    public void pop() {\n        if (this.values.length == 0) {\n            return;\n        }\n        Object[] newValues = new Object[this.values.length - 1];\n        arraycopy(this.values, 0, newValues, 0, this.values.length - 1);\n        this.values = newValues;\n        this.clearNulls();\n    }\n\n    /**\n     * Removes the element at the specified index from the array of values.\n     *\n     * @param index the index of the element to be removed\n     * \n     */\n    public void remove(int index) throws IndexOutOfBoundsException {\n        if (this.values.length == 0) {\n            return;\n        }\n        if (index < 0 || index >= this.values.length) {\n            throw new IndexOutOfBoundsException();\n        }\n        Object[] newValues = new Object[this.values.length - 1];\n        arraycopy(this.values, 0, newValues, 0, index);\n        if (this.values.length - 1 - index >= 0)\n            arraycopy(this.values, index + 1, newValues, index, this.values.length - 1 - index);\n        this.values = newValues;\n        this.clearNulls();\n    }\n\n    /**\n     * Clears the tuple, making it of length 0\n     *\n     * \n     */\n    @Override\n    public void clear() {\n        this.values = new Object[0];\n    }\n\n    /**\n     * Clears T null values from the array.\n     */\n    private void clearNulls() {\n        if (this.values.length == 0) {\n            return;\n        }\n        for (int i = 0; i < this.values.length; i++) {\n            if (this.values[i] == null) {\n                this.remove(i);\n            }\n        }\n    }\n\n    /**\n     * Returns the string representation of the tuple\n     *\n     * @return the string representation of the tuple\n     * \n     */\n    @Override\n    public String toString() {\n        if (this.values.length == 0) {\n            return \"[]\";\n        }\n        return Arrays.toString(this.values);\n    }\n\n    /**\n     * Returns the hash code of the tuple\n     *\n     * @return the hash code of the tuple\n     * \n     */\n    @Override\n    public int hashCode() {\n        if (this.values.length == 0) {\n            return 0;\n        }\n        return Arrays.hashCode(this.values);\n    }\n\n    /**\n     * Reverses the tuple\n     *\n     * \n     */\n    public void reverse() {\n        if (this.values.length == 0 || this.values.length == 1) {\n            return;\n        }\n        Object[] newValues = new Object[this.values.length];\n        for (int i = 0; i < this.values.length; i++) {\n            newValues[i] = this.values[this.values.length - i - 1];\n        }\n        this.setValues(newValues);\n    }\n\n    /**\n     * Slices the tuple from a defined start to a defined end\n     *\n     * @param start the first index\n     * @param end   the last index\n     * \n     */\n    @Override\n    public void slice(int start, int end) {\n        if (end > this.values.length) {\n            end = this.values.length;\n        }\n        if (start < 0) {\n            start = 0;\n        }\n        Object[] newValues = new Object[end - start];\n        arraycopy(this.values, start, newValues, 0, newValues.length);\n        this.setValues(newValues);\n    }\n\n    /**\n     * Splits the tuple at the specified index\n     * The new tuple has the same length as the old one\n     *\n     * @param index the index to split\n     * @param data the new tuple\n     * \n     */\n    public void split(int index, Object data) throws IllegalArgumentException {\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        if (index > this.values.length) {\n            index = this.values.length;\n        }\n        if (index < 0) {\n            index = 0;\n        }\n        Tuple tmp = (Tuple) data;\n        Object[] newValues = new Object[index];\n        Object[] newValues2 = new Object[this.values.length - index];\n        arraycopy(this.values, index, newValues2, 0, this.values.length - index);\n        tmp.setValues(newValues2);\n        arraycopy(this.values, 0, newValues, 0, index);\n        this.setValues(newValues);\n    }\n\n    /**\n     * Joins two tuples into one\n     *\n     * @param datas the tuples to join\n     * \n     */\n    @Override\n    public void join(Object... datas) {\n        for (Object data : datas) {\n            if (!isTuple(data)) {\n                continue;\n            }\n            Tuple tmp = (Tuple) data;\n            for (int i = 0; i < tmp.length(); i++) {\n                this.push(tmp.getValue(i));\n            }\n        }\n    }\n\n    /**\n     * Fills the array with the specified value.\n     *\n     * @param value the value to fill the array with\n     */\n    public <T> void fill(T value, int amount) {\n        if (amount < 0) { amount = 0; }\n        if (amount == 0 || value == null) { return; }\n        for (int i = 0; i < amount; i++) {\n            this.push(value);\n        }\n    }\n\n    /**\n     * Fills the array with random values.\n     *\n     * @param amount the amount of random values to generate\n     */\n    public void fillRandom(int amount) {\n        if (amount < 0 || amount > this.values.length) {\n            amount = 0;\n        }\n        if (amount == 0) {\n            return;\n        }\n        for (int i = 0; i < amount; i++) {\n            this.values[i] = random.nextInt(100);\n        }\n    }\n\n    /**\n     * Fills the values array with random integers between 0 and 99 (inclusive).\n     */\n    public void fillRandom(int min, int max, int amount) {\n        if (amount < 0 || amount > this.values.length) {\n            amount = 0;\n        }\n        if (amount == 0) {\n            return;\n        }\n        if (min > max) {\n            int tmp = min;\n            min = max;\n            max = tmp;\n        }\n        for (int i = 0; i < amount; i++) {\n\n            this.values[i] = random.nextInt(max - min + 1) + min;\n        }\n    }\n\n    /**\n     * Determines if this tuple is a subset of the given tuple.\n     *\n     * @param data the tuple to check against\n     * @return true if this tuple is a subset of the given tuple, false otherwise\n     */\n    @Override\n    public boolean isSubsetOf(Object data) throws IllegalArgumentException{\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        if (this.length() > ((Tuple) data).length()) {\n            return false;\n        }\n        Tuple tmp = (Tuple) data;\n        for (int i = 0; i < this.length(); i++) {\n            if (!tmp.contains(this.getValue(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Determines if this tuple is a superset of the given tuple.\n     *\n     * @param data the tuple to check against\n     * @return true if this tuple is a superset of the given tuple, false otherwise\n     */\n    @Override\n    public boolean isSupersetOf(Object data) throws IllegalArgumentException {\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        if (this.length() < ((Tuple) data).length()) {\n            return false;\n        }\n        Tuple tmp = (Tuple) data;\n        return tmp.isSubsetOf(this);\n    }\n\n    /**\n     * Determines if this set is a strict superset of the given tuple.\n     * A strict superset means that this set contains all the values\n     * of the given tuple in the same order\n     *\n     * @param data the tuple to compare against\n     * @return true if this set is a strict superset of the given tuple, false otherwise\n     */\n    public boolean isStrictSupersetOf(Object data) throws IllegalArgumentException {\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        if (this.length() < ((Tuple) data).length()) {\n            return false;\n        }\n        int consecutive = 0;\n        Tuple tmp = (Tuple) data;\n        for (int i = 0; i < tmp.length(); i++) {\n            if (this.contains(tmp.getValue(i))) {\n                consecutive++;\n            } else {\n                consecutive = 0;\n            }\n        }\n        return consecutive == tmp.length();\n    }\n\n    /**\n     * Determines if this set is a strict subset of the given tuple.\n     * A strict subset means that this set contains all the values\n     * of the given tuple in the same order\n     *\n     * @param data the tuple to compare against\n     * @return true if this set is a strict subset of the given tuple, false otherwise\n     */\n    public boolean isStrictSubsetOf(Object data) throws IllegalArgumentException{\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        if (this.length() > ((Tuple) data).length()) {\n            return false;\n        }\n        Tuple tmp = (Tuple) data;\n        int consecutive = 0;\n        for (int i = 0; i < this.length(); i++) {\n            if (tmp.contains(this.getValue(i))){\n                consecutive++;\n            } else {\n                consecutive = 0;\n            }\n        }\n        return consecutive == this.length();\n    }\n\n    /**\n     * Checks if the current tuple.Tuple is disjoint with the given tuple.Tuple.\n     *\n     * @param data the tuple.Tuple to check for disjointness\n     * @return true if the Tuples are disjoint, false otherwise\n     */\n    @Override\n    public boolean isDisjoint(Object data) throws IllegalArgumentException{\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        if (data.equals(this)) {\n            return false;\n        }\n        Tuple tmp = (Tuple) data;\n        for (int i = 0; i < tmp.length(); i++) {\n            if (this.contains(tmp.getValue(i))){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns the symmetric difference between this tuple and the given tuple\n     * The symmetric difference is the set of values that are in either tuple\n     * but not in both\n     *\n     * @param data the tuple\n     * @return the symmetric difference\n     */\n    public Object symmetricDifference(Object data) throws IllegalArgumentException {\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        Tuple tuple = (Tuple) data;\n        Tuple result = new Tuple();\n        for (int i = 0; i < this.length(); i++) {\n            if (!tuple.contains(this.getValue(i))) {\n                result.push(this.getValue(i));\n            }\n        }\n        for (int i = 0; i < tuple.length(); i++) {\n            if (!this.contains(tuple.getValue(i))) {\n                result.push(tuple.getValue(i));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Subtracts the given tuple from this tuple\n     *\n     * @param data the tuple\n     * @return the result\n     */\n    @Override\n    public Object subtract(Object data) throws IllegalArgumentException {\n        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }\n        Tuple tmp = (Tuple) data;\n        Tuple result = new Tuple();\n        for (int i = 0; i < this.length(); i++) {\n            if (!tmp.contains(this.getValue(i))){\n                result.push(this.getValue(i));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filters the elements of the tuple.Tuple based on the given predicate.\n     *\n     * @param predicate the predicate used to filter the elements of the tuple.Tuple\n     * @return the filtered tuple.Tuple\n     */\n    @Override\n    public Object filter(Predicate<Object> predicate){\n        Tuple result = new Tuple();\n        IntStream.range(\n                0,\n                this.length()\n        )\n        .filter(\n            i -> predicate.test(this.getValue(i))\n        ).mapToObj(\n                this::getValue\n        ).forEachOrdered(result::push);\n\n        return result;\n    }\n\n    /**\n     * Returns an iterator over elements of type {@code T}.\n     *\n     * @return an Iterator.\n     */\n    @Override\n    public Iterator<Object> iterator() {\n        return new Iterator<>() {\n            private int currentIndex = 0;\n\n            @Override\n            public boolean hasNext() {\n                return currentIndex < length() && values[currentIndex] != null;\n            }\n\n            @Override\n            public Object next() {\n                if (!hasNext()) { throw new NoSuchElementException(); }\n                return values[currentIndex++];\n            }\n        };\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/mazluc/data/Tuple.java b/src/main/java/ch/mazluc/data/Tuple.java
--- a/src/main/java/ch/mazluc/data/Tuple.java	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ b/src/main/java/ch/mazluc/data/Tuple.java	(date 1704218633150)
@@ -31,10 +31,6 @@
  * SOFTWARE.
  */
 /**
- * <h1>
- * Tuple
- * </h1>
- *
  * <p>
  * This class represents a tuple of values.
  * A tuple is a sequence of values that can be
@@ -68,7 +64,7 @@
     /**
      * Message when an object is not a tuple
      */
-    private static final String OINAT = "Object is not a tuple";
+    private static final String NOT_A_TUPLE = "Object is not a tuple";
 
     /**
      * Random generator.
@@ -484,7 +480,7 @@
      * 
      */
     public void split(int index, Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (index > this.values.length) {
             index = this.values.length;
         }
@@ -578,7 +574,7 @@
      */
     @Override
     public boolean isSubsetOf(Object data) throws IllegalArgumentException{
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() > ((Tuple) data).length()) {
             return false;
         }
@@ -599,7 +595,7 @@
      */
     @Override
     public boolean isSupersetOf(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() < ((Tuple) data).length()) {
             return false;
         }
@@ -616,7 +612,7 @@
      * @return true if this set is a strict superset of the given tuple, false otherwise
      */
     public boolean isStrictSupersetOf(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() < ((Tuple) data).length()) {
             return false;
         }
@@ -641,7 +637,7 @@
      * @return true if this set is a strict subset of the given tuple, false otherwise
      */
     public boolean isStrictSubsetOf(Object data) throws IllegalArgumentException{
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (this.length() > ((Tuple) data).length()) {
             return false;
         }
@@ -665,7 +661,7 @@
      */
     @Override
     public boolean isDisjoint(Object data) throws IllegalArgumentException{
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         if (data.equals(this)) {
             return false;
         }
@@ -687,7 +683,7 @@
      * @return the symmetric difference
      */
     public Object symmetricDifference(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         Tuple tuple = (Tuple) data;
         Tuple result = new Tuple();
         for (int i = 0; i < this.length(); i++) {
@@ -711,7 +707,7 @@
      */
     @Override
     public Object subtract(Object data) throws IllegalArgumentException {
-        if (!isTuple(data)){ throw new IllegalArgumentException(OINAT); }
+        if (!isTuple(data)){ throw new IllegalArgumentException(NOT_A_TUPLE); }
         Tuple tmp = (Tuple) data;
         Tuple result = new Tuple();
         for (int i = 0; i < this.length(); i++) {
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	(date 1703190139070)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1703190139070)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
--- /dev/null	(date 1703190139065)
+++ b/.idea/codeStyles/Project.xml	(date 1703190139065)
@@ -0,0 +1,7 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <ScalaCodeStyleSettings>
+      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
+    </ScalaCodeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: .idea/sonarlint/issuestore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nR\n\"src/main/java/ch/mazluc/Tuple.java\u0012,a/8/a84756550be34ae47d2dd29f19ed4609f6a2a974\nQ\n!src/main/java/ch/mazluc/Data.java\u0012,c/4/c4cdac5d06bef18a37b82eb82f6d9ed1c5c59e78\nR\n\"src/main/java/ch/mazluc/Table.java\u0012,3/6/36183789120773293e7f995870d67508d5889165\nY\n)src/main/java/ch/mazluc/BCMLDocument.java\u0012,2/c/2c8486eff82b6c90927fbd2eb9ff63f9454c98fe\nV\n&src/test/java/ch/mazluc/TupleTest.java\u0012,b/b/bba679067b65ce70874f83230e19378d24b8a65a\nS\n#.idea/sonarlint/issuestore/index.pb\u0012,9/f/9fe84ebb15faf917b7def6236dba604453cc61e0\n]\n-.idea/sonarlint/securityhotspotstore/index.pb\u0012,8/8/88a9255124c95bdc913197c120a8d560edc59c8e\nV\n&src/test/java/ch/mazluc/TableTest.java\u0012,d/a/da23e12da5a2702c90fad265208b9a4822576088\nU\n%src/main/java/ch/mazluc/Document.java\u0012,9/0/90a8657460a5659875273732fe34e802c1653eb6\nQ\n!src/main/java/ch/mazluc/Line.java\u0012,b/2/b258b6a8cc6455b1657524519494310792214207\nW\n'src/main/java/ch/mazluc/StringTool.java\u0012,d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82\n<\n\fbuild.gradle\u0012,f/0/f07866736216be0ee2aba49e392191aeae700a35\n]\n-src/test/java/ch/mazluc/BCMLDocumentTest.java\u0012,b/0/b073854253e8935f3fbc9269992103ae2e046bae\nG\n\u0017.idea/modules/BData.iml\u0012,f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce\nL\n\u001C.idea/modules/BData.main.iml\u0012,c/b/cb567570a6ae71af363d7384d5f3ff6a71cedd1b\nL\n\u001C.idea/modules/BData.test.iml\u0012,2/3/236cbafef934f95d623523fe042467138643c549\n[\n+src/test/java/ch/mazluc/data/TableTest.java\u0012,1/7/17a81e2ff94045fed7082501cad242140d257751\nb\n2src/test/java/ch/mazluc/data/BCMLDocumentTest.java\u0012,f/1/f1c8deab0fc1df5dab35269274240e84109ea881\n^\n.src/main/java/ch/mazluc/data/BCMLDocument.java\u0012,6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/issuestore/index.pb b/.idea/sonarlint/issuestore/index.pb
--- a/.idea/sonarlint/issuestore/index.pb	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ b/.idea/sonarlint/issuestore/index.pb	(date 1704218633147)
@@ -1,30 +1,10 @@
 
-R
-"src/main/java/ch/mazluc/Tuple.java,a/8/a84756550be34ae47d2dd29f19ed4609f6a2a974
-Q
-!src/main/java/ch/mazluc/Data.java,c/4/c4cdac5d06bef18a37b82eb82f6d9ed1c5c59e78
-R
-"src/main/java/ch/mazluc/Table.java,3/6/36183789120773293e7f995870d67508d5889165
-Y
-)src/main/java/ch/mazluc/BCMLDocument.java,2/c/2c8486eff82b6c90927fbd2eb9ff63f9454c98fe
-V
-&src/test/java/ch/mazluc/TupleTest.java,b/b/bba679067b65ce70874f83230e19378d24b8a65a
 S
 #.idea/sonarlint/issuestore/index.pb,9/f/9fe84ebb15faf917b7def6236dba604453cc61e0
 ]
 -.idea/sonarlint/securityhotspotstore/index.pb,8/8/88a9255124c95bdc913197c120a8d560edc59c8e
-V
-&src/test/java/ch/mazluc/TableTest.java,d/a/da23e12da5a2702c90fad265208b9a4822576088
-U
-%src/main/java/ch/mazluc/Document.java,9/0/90a8657460a5659875273732fe34e802c1653eb6
-Q
-!src/main/java/ch/mazluc/Line.java,b/2/b258b6a8cc6455b1657524519494310792214207
-W
-'src/main/java/ch/mazluc/StringTool.java,d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82
 <
 build.gradle,f/0/f07866736216be0ee2aba49e392191aeae700a35
-]
--src/test/java/ch/mazluc/BCMLDocumentTest.java,b/0/b073854253e8935f3fbc9269992103ae2e046bae
 G
 .idea/modules/BData.iml,f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce
 L
@@ -36,4 +16,21 @@
 b
 2src/test/java/ch/mazluc/data/BCMLDocumentTest.java,f/1/f1c8deab0fc1df5dab35269274240e84109ea881
 ^
-.src/main/java/ch/mazluc/data/BCMLDocument.java,6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
\ No newline at end of file
+.src/main/java/ch/mazluc/data/BCMLDocument.java,6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
+V
+&src/main/java/ch/mazluc/data/Data.java,5/9/59f466eddb93766df07572d0a09081387395aa8a
+Z
+*src/main/java/ch/mazluc/data/Document.java,b/d/bd32ab11b295addc58ac3011fbac81ac4bd651f0
+V
+&src/main/java/ch/mazluc/data/Line.java,5/6/56d5651ae8990acfc4e5585dacaa84ab454ecaec
+\
+,src/main/java/ch/mazluc/data/StringTool.java,3/8/38c9ffdb7f82cacab7c58e142cde1acfa49e7335
+W
+'src/main/java/ch/mazluc/data/Table.java,e/8/e88a0d34a09f67ebf642fe9d6bee27684d00990a
+W
+'src/main/java/ch/mazluc/data/Tuple.java,6/8/687ad95558ab6c693557b4d4670ef1c9ea487321
+:
+
+.gitignore,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
+[
++src/test/java/ch/mazluc/data/TupleTest.java,a/1/a1bb7838f72384f257aa16495875fdbbdcdd054e
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Created by https://www.gitignore.io/api/java,gradle\n\n### Java ###\n*.class\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n\n### Gradle ###\n.gradle\n/build/\n\n# Ignore Gradle GUI config\ngradle-app.setting\n\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n\n# Cache of project\n.gradletasknamecache\n\n# Gradlew files\ngradlew.*\n\n# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898\n# gradle/wrapper/gradle-wrapper.properties\n\n# End of https://www.gitignore.io/api/java,gradle\n*.pb\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ b/.gitignore	(date 1704218633145)
@@ -17,6 +17,9 @@
 # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
 hs_err_pid*
 
+### IntelliJ ###
+*.pb
+.idea/
 
 ### Gradle ###
 .gradle
@@ -38,4 +41,3 @@
 # gradle/wrapper/gradle-wrapper.properties
 
 # End of https://www.gitignore.io/api/java,gradle
-*.pb
Index: src/test/java/ch/mazluc/data/BCMLDocumentTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * MIT License\n *\n * Copyright (c) 2023 Luca Mazza\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage ch.mazluc.data;\n\nimport ch.mazluc.data.BCMLDocument;\nimport ch.mazluc.data.Line;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BCMLDocumentTest {\n\n    @Test\n    void lineCount() {\n        BCMLDocument<Integer> document = new BCMLDocument<>();\n        assertEquals(0, document.lineCount());\n        document.append(new Line<>(3,\"First line\"));\n        assertEquals(1, document.lineCount());\n    }\n\n    @Test\n    void isEmpty() {\n        BCMLDocument<Integer> document = new BCMLDocument<>();\n        assertTrue(document.isEmpty());\n        document.append(new Line<>(3,\"First line\"));\n        assertFalse(document.isEmpty());\n    }\n\n    @Test\n    void getLine() {\n    }\n\n    @Test\n    void append() {\n    }\n\n    @Test\n    void clear() {\n    }\n\n    @Test\n    void serialize() {\n    }\n\n    @Test\n    void iterator() {\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ch/mazluc/data/BCMLDocumentTest.java b/src/test/java/ch/mazluc/data/BCMLDocumentTest.java
--- a/src/test/java/ch/mazluc/data/BCMLDocumentTest.java	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ b/src/test/java/ch/mazluc/data/BCMLDocumentTest.java	(date 1704218633151)
@@ -22,12 +22,8 @@
  */
 package ch.mazluc.data;
 
-import ch.mazluc.data.BCMLDocument;
-import ch.mazluc.data.Line;
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.*;
-
 class BCMLDocumentTest {
 
     @Test
Index: .idea/modules/BData.main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module version=\"4\">\n  <component name=\"SonarLintModuleSettings\">\n    <option name=\"uniqueId\" value=\"e74e6f41-64d9-4712-bb88-21667b1f63f9\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/BData.main.iml b/.idea/modules/BData.main.iml
--- a/.idea/modules/BData.main.iml	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ b/.idea/modules/BData.main.iml	(date 1704218633145)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module version="4">
   <component name="SonarLintModuleSettings">
-    <option name="uniqueId" value="e74e6f41-64d9-4712-bb88-21667b1f63f9" />
+    <option name="uniqueId" value="ba9db15b-882b-4e47-9b3e-53c82fe64ef7" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/modules/BData.test.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module version=\"4\">\n  <component name=\"SonarLintModuleSettings\">\n    <option name=\"uniqueId\" value=\"6259187e-916f-43df-826e-ed1c15c24fb6\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/BData.test.iml b/.idea/modules/BData.test.iml
--- a/.idea/modules/BData.test.iml	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ b/.idea/modules/BData.test.iml	(date 1704218633145)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module version="4">
   <component name="SonarLintModuleSettings">
-    <option name="uniqueId" value="6259187e-916f-43df-826e-ed1c15c24fb6" />
+    <option name="uniqueId" value="e2c8b171-09e0-4d28-8044-ff74cd65e7f1" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/BData.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/BData.iml b/.idea/BData.iml
new file mode 100644
--- /dev/null	(date 1704218549220)
+++ b/.idea/BData.iml	(date 1704218549220)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="AdditionalModuleElements">
+    <content url="file://$MODULE_DIR$" dumb="true">
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/issuestore/9/0" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/issuestore/b/0" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/issuestore/b/b" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/issuestore/d/a" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/issuestore/f/0" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/securityhotspotstore/9/0" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/securityhotspotstore/b/0" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/securityhotspotstore/b/b" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/securityhotspotstore/d/a" />
+      <excludeFolder url="file://$MODULE_DIR$/.idea/sonarlint/securityhotspotstore/f/0" />
+    </content>
+  </component>
+  <component name="SonarLintModuleSettings">
+    <option name="uniqueId" value="2f1c4f3d-47b2-4d6c-a7fb-1ea96e774bb3" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/sonarlint/securityhotspotstore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nR\n\"src/main/java/ch/mazluc/Tuple.java\u0012,a/8/a84756550be34ae47d2dd29f19ed4609f6a2a974\nQ\n!src/main/java/ch/mazluc/Data.java\u0012,c/4/c4cdac5d06bef18a37b82eb82f6d9ed1c5c59e78\nR\n\"src/main/java/ch/mazluc/Table.java\u0012,3/6/36183789120773293e7f995870d67508d5889165\nY\n)src/main/java/ch/mazluc/BCMLDocument.java\u0012,2/c/2c8486eff82b6c90927fbd2eb9ff63f9454c98fe\nV\n&src/test/java/ch/mazluc/TupleTest.java\u0012,b/b/bba679067b65ce70874f83230e19378d24b8a65a\nS\n#.idea/sonarlint/issuestore/index.pb\u0012,9/f/9fe84ebb15faf917b7def6236dba604453cc61e0\n]\n-.idea/sonarlint/securityhotspotstore/index.pb\u0012,8/8/88a9255124c95bdc913197c120a8d560edc59c8e\nV\n&src/test/java/ch/mazluc/TableTest.java\u0012,d/a/da23e12da5a2702c90fad265208b9a4822576088\nU\n%src/main/java/ch/mazluc/Document.java\u0012,9/0/90a8657460a5659875273732fe34e802c1653eb6\nQ\n!src/main/java/ch/mazluc/Line.java\u0012,b/2/b258b6a8cc6455b1657524519494310792214207\nW\n'src/main/java/ch/mazluc/StringTool.java\u0012,d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82\n<\n\fbuild.gradle\u0012,f/0/f07866736216be0ee2aba49e392191aeae700a35\n]\n-src/test/java/ch/mazluc/BCMLDocumentTest.java\u0012,b/0/b073854253e8935f3fbc9269992103ae2e046bae\nG\n\u0017.idea/modules/BData.iml\u0012,f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce\nL\n\u001C.idea/modules/BData.main.iml\u0012,c/b/cb567570a6ae71af363d7384d5f3ff6a71cedd1b\nL\n\u001C.idea/modules/BData.test.iml\u0012,2/3/236cbafef934f95d623523fe042467138643c549\n[\n+src/test/java/ch/mazluc/data/TableTest.java\u0012,1/7/17a81e2ff94045fed7082501cad242140d257751\nb\n2src/test/java/ch/mazluc/data/BCMLDocumentTest.java\u0012,f/1/f1c8deab0fc1df5dab35269274240e84109ea881\n^\n.src/main/java/ch/mazluc/data/BCMLDocument.java\u0012,6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/securityhotspotstore/index.pb b/.idea/sonarlint/securityhotspotstore/index.pb
--- a/.idea/sonarlint/securityhotspotstore/index.pb	(revision 0358fd3410bc2c8f75c5797c1907a76a0c778cd6)
+++ b/.idea/sonarlint/securityhotspotstore/index.pb	(date 1704218633148)
@@ -1,30 +1,10 @@
 
-R
-"src/main/java/ch/mazluc/Tuple.java,a/8/a84756550be34ae47d2dd29f19ed4609f6a2a974
-Q
-!src/main/java/ch/mazluc/Data.java,c/4/c4cdac5d06bef18a37b82eb82f6d9ed1c5c59e78
-R
-"src/main/java/ch/mazluc/Table.java,3/6/36183789120773293e7f995870d67508d5889165
-Y
-)src/main/java/ch/mazluc/BCMLDocument.java,2/c/2c8486eff82b6c90927fbd2eb9ff63f9454c98fe
-V
-&src/test/java/ch/mazluc/TupleTest.java,b/b/bba679067b65ce70874f83230e19378d24b8a65a
 S
 #.idea/sonarlint/issuestore/index.pb,9/f/9fe84ebb15faf917b7def6236dba604453cc61e0
 ]
 -.idea/sonarlint/securityhotspotstore/index.pb,8/8/88a9255124c95bdc913197c120a8d560edc59c8e
-V
-&src/test/java/ch/mazluc/TableTest.java,d/a/da23e12da5a2702c90fad265208b9a4822576088
-U
-%src/main/java/ch/mazluc/Document.java,9/0/90a8657460a5659875273732fe34e802c1653eb6
-Q
-!src/main/java/ch/mazluc/Line.java,b/2/b258b6a8cc6455b1657524519494310792214207
-W
-'src/main/java/ch/mazluc/StringTool.java,d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82
 <
 build.gradle,f/0/f07866736216be0ee2aba49e392191aeae700a35
-]
--src/test/java/ch/mazluc/BCMLDocumentTest.java,b/0/b073854253e8935f3fbc9269992103ae2e046bae
 G
 .idea/modules/BData.iml,f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce
 L
@@ -36,4 +16,21 @@
 b
 2src/test/java/ch/mazluc/data/BCMLDocumentTest.java,f/1/f1c8deab0fc1df5dab35269274240e84109ea881
 ^
-.src/main/java/ch/mazluc/data/BCMLDocument.java,6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
\ No newline at end of file
+.src/main/java/ch/mazluc/data/BCMLDocument.java,6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
+V
+&src/main/java/ch/mazluc/data/Data.java,5/9/59f466eddb93766df07572d0a09081387395aa8a
+Z
+*src/main/java/ch/mazluc/data/Document.java,b/d/bd32ab11b295addc58ac3011fbac81ac4bd651f0
+V
+&src/main/java/ch/mazluc/data/Line.java,5/6/56d5651ae8990acfc4e5585dacaa84ab454ecaec
+\
+,src/main/java/ch/mazluc/data/StringTool.java,3/8/38c9ffdb7f82cacab7c58e142cde1acfa49e7335
+W
+'src/main/java/ch/mazluc/data/Table.java,e/8/e88a0d34a09f67ebf642fe9d6bee27684d00990a
+W
+'src/main/java/ch/mazluc/data/Tuple.java,6/8/687ad95558ab6c693557b4d4670ef1c9ea487321
+:
+
+.gitignore,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
+[
++src/test/java/ch/mazluc/data/TupleTest.java,a/1/a1bb7838f72384f257aa16495875fdbbdcdd054e
\ No newline at end of file
diff --git a/.idea/sonarlint/securityhotspotstore/1/7/17a81e2ff94045fed7082501cad242140d257751 b/.idea/sonarlint/securityhotspotstore/1/7/17a81e2ff94045fed7082501cad242140d257751
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/f/f/ff33d9a6a165451bf997afdb6eb80e13778d41d0 b/.idea/sonarlint/securityhotspotstore/f/f/ff33d9a6a165451bf997afdb6eb80e13778d41d0
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80 b/.idea/sonarlint/issuestore/6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/6/8/687ad95558ab6c693557b4d4670ef1c9ea487321 b/.idea/sonarlint/issuestore/6/8/687ad95558ab6c693557b4d4670ef1c9ea487321
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/2/3/23044eb94082d0cf5d56ce5958fe26b933d7e206 b/.idea/sonarlint/securityhotspotstore/2/3/23044eb94082d0cf5d56ce5958fe26b933d7e206
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/2/3/236cbafef934f95d623523fe042467138643c549 b/.idea/sonarlint/securityhotspotstore/2/3/236cbafef934f95d623523fe042467138643c549
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/7/3/738557c176a2cad7537f154fb75565e51e42d993 b/.idea/sonarlint/issuestore/7/3/738557c176a2cad7537f154fb75565e51e42d993
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/2/6/265f74d15b2762c25ac816cb6cfc7efecbee3813 b/.idea/sonarlint/securityhotspotstore/2/6/265f74d15b2762c25ac816cb6cfc7efecbee3813
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/b/2/b258b6a8cc6455b1657524519494310792214207 b/.idea/sonarlint/securityhotspotstore/b/2/b258b6a8cc6455b1657524519494310792214207
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/b/2/b28d64263073445067495b1599bb25079d4dd1ea b/.idea/sonarlint/securityhotspotstore/b/2/b28d64263073445067495b1599bb25079d4dd1ea
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/2/c/2c8486eff82b6c90927fbd2eb9ff63f9454c98fe b/.idea/sonarlint/securityhotspotstore/2/c/2c8486eff82b6c90927fbd2eb9ff63f9454c98fe
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/8/8/88a9255124c95bdc913197c120a8d560edc59c8e b/.idea/sonarlint/issuestore/8/8/88a9255124c95bdc913197c120a8d560edc59c8e
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/3/8/38c9ffdb7f82cacab7c58e142cde1acfa49e7335 b/.idea/sonarlint/securityhotspotstore/3/8/38c9ffdb7f82cacab7c58e142cde1acfa49e7335
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/1/7/17a81e2ff94045fed7082501cad242140d257751 b/.idea/sonarlint/issuestore/1/7/17a81e2ff94045fed7082501cad242140d257751
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/b/d/bd32ab11b295addc58ac3011fbac81ac4bd651f0 b/.idea/sonarlint/securityhotspotstore/b/d/bd32ab11b295addc58ac3011fbac81ac4bd651f0
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0 b/.idea/sonarlint/issuestore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0 2 b/.idea/sonarlint/issuestore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0 2
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/5/6/56d5651ae8990acfc4e5585dacaa84ab454ecaec b/.idea/sonarlint/securityhotspotstore/5/6/56d5651ae8990acfc4e5585dacaa84ab454ecaec
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/a/1/a1bb7838f72384f257aa16495875fdbbdcdd054e b/.idea/sonarlint/issuestore/a/1/a1bb7838f72384f257aa16495875fdbbdcdd054e
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/5/9/59f466eddb93766df07572d0a09081387395aa8a b/.idea/sonarlint/securityhotspotstore/5/9/59f466eddb93766df07572d0a09081387395aa8a
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80 b/.idea/sonarlint/securityhotspotstore/6/2/6244087d6a910ffd4b269936ba76f65df2dd9c80
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/a/5/a5cc2925ca8258af241be7e5b0381edf30266302 b/.idea/sonarlint/issuestore/a/5/a5cc2925ca8258af241be7e5b0381edf30266302
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/6/8/687ad95558ab6c693557b4d4670ef1c9ea487321 b/.idea/sonarlint/securityhotspotstore/6/8/687ad95558ab6c693557b4d4670ef1c9ea487321
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/c/b/cb567570a6ae71af363d7384d5f3ff6a71cedd1b b/.idea/sonarlint/securityhotspotstore/c/b/cb567570a6ae71af363d7384d5f3ff6a71cedd1b
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/b/2/b258b6a8cc6455b1657524519494310792214207 b/.idea/sonarlint/issuestore/b/2/b258b6a8cc6455b1657524519494310792214207
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/b/2/b28d64263073445067495b1599bb25079d4dd1ea b/.idea/sonarlint/issuestore/b/2/b28d64263073445067495b1599bb25079d4dd1ea
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/7/3/738557c176a2cad7537f154fb75565e51e42d993 b/.idea/sonarlint/securityhotspotstore/7/3/738557c176a2cad7537f154fb75565e51e42d993
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/2/3/23044eb94082d0cf5d56ce5958fe26b933d7e206 b/.idea/sonarlint/issuestore/2/3/23044eb94082d0cf5d56ce5958fe26b933d7e206
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/2/3/236cbafef934f95d623523fe042467138643c549 b/.idea/sonarlint/issuestore/2/3/236cbafef934f95d623523fe042467138643c549
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/2/6/265f74d15b2762c25ac816cb6cfc7efecbee3813 b/.idea/sonarlint/issuestore/2/6/265f74d15b2762c25ac816cb6cfc7efecbee3813
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/8/8/88a9255124c95bdc913197c120a8d560edc59c8e b/.idea/sonarlint/securityhotspotstore/8/8/88a9255124c95bdc913197c120a8d560edc59c8e
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/d/8/d870c45a8251c5a97991f0258cc64d02c28b1126 b/.idea/sonarlint/securityhotspotstore/d/8/d870c45a8251c5a97991f0258cc64d02c28b1126
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/b/d/bd32ab11b295addc58ac3011fbac81ac4bd651f0 b/.idea/sonarlint/issuestore/b/d/bd32ab11b295addc58ac3011fbac81ac4bd651f0
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/c/b/cb567570a6ae71af363d7384d5f3ff6a71cedd1b b/.idea/sonarlint/issuestore/c/b/cb567570a6ae71af363d7384d5f3ff6a71cedd1b
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82 b/.idea/sonarlint/securityhotspotstore/d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0 b/.idea/sonarlint/securityhotspotstore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/d/8/d870c45a8251c5a97991f0258cc64d02c28b1126 b/.idea/sonarlint/issuestore/d/8/d870c45a8251c5a97991f0258cc64d02c28b1126
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0 2 b/.idea/sonarlint/securityhotspotstore/9/f/9fe84ebb15faf917b7def6236dba604453cc61e0 2
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82 b/.idea/sonarlint/issuestore/d/b/dbe6783726ee199f1dc877d0b419900d5d7a3e82
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/e/8/e88a0d34a09f67ebf642fe9d6bee27684d00990a b/.idea/sonarlint/issuestore/e/8/e88a0d34a09f67ebf642fe9d6bee27684d00990a
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/e/8/e88a0d34a09f67ebf642fe9d6bee27684d00990a b/.idea/sonarlint/securityhotspotstore/e/8/e88a0d34a09f67ebf642fe9d6bee27684d00990a
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/a/1/a1bb7838f72384f257aa16495875fdbbdcdd054e b/.idea/sonarlint/securityhotspotstore/a/1/a1bb7838f72384f257aa16495875fdbbdcdd054e
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce b/.idea/sonarlint/issuestore/f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/a/5/a5cc2925ca8258af241be7e5b0381edf30266302 b/.idea/sonarlint/securityhotspotstore/a/5/a5cc2925ca8258af241be7e5b0381edf30266302
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/3/8/38c9ffdb7f82cacab7c58e142cde1acfa49e7335 b/.idea/sonarlint/issuestore/3/8/38c9ffdb7f82cacab7c58e142cde1acfa49e7335
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/f/1/f1c8deab0fc1df5dab35269274240e84109ea881 b/.idea/sonarlint/securityhotspotstore/f/1/f1c8deab0fc1df5dab35269274240e84109ea881
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/5/6/56d5651ae8990acfc4e5585dacaa84ab454ecaec b/.idea/sonarlint/issuestore/5/6/56d5651ae8990acfc4e5585dacaa84ab454ecaec
new file mode 100644
diff --git a/.idea/sonarlint/securityhotspotstore/f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce b/.idea/sonarlint/securityhotspotstore/f/1/f102aa3afec92ae50f45bf7d528aea5a0ad725ce
new file mode 100644
diff --git a/.idea/sonarlint/issuestore/5/9/59f466eddb93766df07572d0a09081387395aa8a b/.idea/sonarlint/issuestore/5/9/59f466eddb93766df07572d0a09081387395aa8a
new file mode 100644
